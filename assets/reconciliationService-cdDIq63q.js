const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BjROJruB.js","assets/index-D5WBS40H.css"])))=>i.map(i=>d[i]);
import{u as d,_ as l,s as u}from"./index-BjROJruB.js";class _{isReconciling=!1;async reconcileAfterCleanup(){if(this.isReconciling)return console.log("⏳ Réconciliation déjà en cours"),{success:!1,actionsRecreated:0,errors:["Réconciliation en cours"]};this.isReconciling=!0;const o=[];let t=0;try{console.log("🔄 [ReconciliationService] Début de la réconciliation...");const s=d.getState(),r=s.route.driverRoute;if(!r)return console.log("ℹ️ Aucune route locale à réconcilier"),{success:!0,actionsRecreated:0,errors:[]};const c=await this.fetchSupabaseState(r.id);if(!c)return o.push("Impossible de récupérer l'état Supabase"),{success:!1,actionsRecreated:0,errors:o};const a=this.detectDifferences(s,c);return console.log("🔍 Différences détectées:",a),t=await this.recreateMissingActions(a,s),t>0&&(console.log(`🚀 [ReconciliationService] ${t} actions recréées - déclenchement immédiat de la sync`),setTimeout(async()=>{try{const{syncService:e}=await l(async()=>{const{syncService:i}=await import("./index-BjROJruB.js").then(n=>n.a);return{syncService:i}},__vite__mapDeps([0,1]));e.triggerSync()}catch(e){console.error("❌ Erreur déclenchement sync après réconciliation:",e)}},1e3)),console.log(`✅ Réconciliation terminée: ${t} actions recréées`),{success:!0,actionsRecreated:t,errors:o}}catch(s){return console.error("❌ Erreur lors de la réconciliation:",s),o.push(s instanceof Error?s.message:"Erreur inconnue"),{success:!1,actionsRecreated:t,errors:o}}finally{this.isReconciling=!1}}async fetchSupabaseState(o){try{const[t,s,r]=await Promise.all([u.from("driver_routes").select("*").eq("id",o).single(),u.from("driver_route_stops").select("*").eq("route_id",o).order("stop_order"),u.from("driver_route_shipments").select("*").eq("route_id",o)]);if(t.error)throw t.error;if(s.error)throw s.error;if(r.error)throw r.error;return{route:t.data,stops:s.data,shipments:r.data}}catch(t){return console.error("❌ Erreur récupération état Supabase:",t),null}}detectDifferences(o,t){const s={completedStops:[],updatedShipments:[]},r=o.route.driverRoute,c=o.route.rawStops,a=o.route.rawShipments;return r.status!==t.route.status&&(console.log(`📍 Route status différent: local="${r.status}" vs supabase="${t.route.status}"`),s.routeStatus=!0),c.forEach(e=>{const i=t.stops.find(n=>n.id===e.id);i&&e.completed&&!i.completed&&(console.log(`📍 Stop complété localement mais pas sur Supabase: ${e.id}`),s.completedStops.push(e.id))}),a.forEach(e=>{const i=t.shipments.find(n=>n.id===e.id);if(i){const n=e.delivery_status!==i.delivery_status,p=e.pickup_status!==i.pickup_status;(n||p)&&(console.log(`📦 Shipment différent: ${e.id}`,{local:{delivery:e.delivery_status,pickup:e.pickup_status},supabase:{delivery:i.delivery_status,pickup:i.pickup_status}}),s.updatedShipments.push({id:e.id,localStatus:{delivery_status:e.delivery_status,pickup_status:e.pickup_status,proof_photo_url:e.proof_photo_url},supabaseStatus:{delivery_status:i.delivery_status,pickup_status:i.pickup_status,proof_photo_url:i.proof_photo_url}}))}}),s}async recreateMissingActions(o,t){let s=0;o.routeStatus&&t.route.driverRoute.status==="completed"&&(console.log("🔄 Recréation action COMPLETE_ROUTE..."),t.addPendingAction({type:"COMPLETE_ROUTE",data:{routeUpdate:{status:"completed",updated_at:t.route.completedAt||new Date().toISOString()}},maxRetries:5}),s++);for(const r of o.completedStops){console.log(`🔄 Recréation action pour stop complété: ${r}`);const c=t.route.groupedStops.find(a=>a.originalStopIds.includes(r));if(c){const a=[...c.deliveryShipments,...c.pickupShipments].map(e=>({id:e.id,pickup_status:e.pickup_status,delivery_status:e.delivery_status,proof_photo_url:e.proof_photo_url,issue_type:e.issue_type,pickup_time:e.pickup_time,delivery_time:e.delivery_time}));t.addPendingAction({type:"COMPLETE_GROUPED_STOP",groupedStopId:c.id,data:{originalStopIds:c.originalStopIds,shipmentUpdates:a},maxRetries:3}),s++}}for(const r of o.updatedShipments)console.log(`🔄 Recréation action pour shipment: ${r.id}`),t.addPendingAction({type:"UPDATE_SHIPMENT_STATUS",data:{shipmentUpdate:{id:r.id,...r.localStatus}},maxRetries:3}),s++;return s}}const y=new _;export{y as reconciliationService};
